name: Build git-annex on Windows

on:
  # Trigger the workflow on pull requests
  pull_request:
    paths:
      - '.github/workflows/build-windows.yaml'
  schedule:
    - cron: '30 03 * * *'
  workflow_dispatch:
    inputs:
      commitish:
        description: The upstream commitish to build
      pr:
        description: The number of the PR to build

defaults:
  run:
    shell: bash

env:
  LANG: C.utf-8

jobs:
  build-package:
    runs-on: windows-2016
    outputs:
      build-version: ${{ steps.build-version.outputs.version }}
    steps:
      - name: Setup Haskell
        uses: actions/setup-haskell@v1.1.3
        with:
          enable-stack: true
          stack-no-global: true

      - name: Handle long filenames
        run: git config --system core.longpaths true

      - name: Checkout this repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Determine git-annex ref to build
        run: |
          . .github/workflows/tools/set-build-commit
          echo "BUILD_COMMIT=$BUILD_COMMIT" >> "$GITHUB_ENV"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_PR: ${{ github.event.inputs.pr }}
          INPUT_COMMITISH: ${{ github.event.inputs.commitish }}

      - name: Check out source files
        run: git checkout "$BUILD_COMMIT" -- .

      - name: Get build version
        id: build-version
        run: |
          version="$(git describe "$BUILD_COMMIT" | sed -e 's/-/+git/')"
          arch=x64
          echo "Building $version"
          echo "::set-output name=version::${version}_$arch"

      - name: Apply local patches
        run: .github/workflows/tools/apply-patches patches
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download and "install" libmagic for windows
        run: |
          export TARGET_REPO=datalad/file-windows
          export TARGET_WORKFLOW=build.yml
          export GITHUB_TOKEN="${{ secrets.datalad_github_token }}"
          .github/workflows/tools/download-latest-artifact
          cp download/* .
          cp libmagic-1.dll libmagic.dll

      - name: Enable building with magic
        run: |
          perl -pli -e 's/magicmime: false/magicmime: true/' stack.yaml

      - name: Set UPGRADE_LOCATION
        run: |
          # This tells git-annex where to upgrade itself from.
          echo "UPGRADE_LOCATION=http://downloads.kitenet.net/git-annex/windows/current/git-annex-installer.exe" >> "$GITHUB_ENV"

      - name: Run stack --version
        run: stack --version

      - name: stack setup
        run: stack setup

      # At this point, stack.yaml.lock exists, so we can activate the cache

      - name: Enable Stack cache
        uses: actions/cache@v2
        with:
          path: 'C:\sr\snapshots'
          key: cache-stack-windows-${{ hashFiles('stack.yaml.lock') }}-${{ hashFiles('git-annex.cabal') }}
          restore-keys: |
            cache-stack-windows-

      - name: Build dependencies
        run: stack build --only-dependencies --extra-include-dirs=$PWD --extra-lib-dirs=$PWD

      - name: Update version info for git rev being built.
        run: |
          mkdir -p dist
          stack ghc --no-haddock Build/BuildVersion.hs
          ./Build/BuildVersion > dist/build-version

      - name: Build git-annex
        run: stack install --no-haddock --local-bin-path .

      - name: Build the installer
        run: |
          stack ghc --no-haddock --package nsis Build/NullSoftInstaller.hs
          TMP="$PWD" ./Build/NullSoftInstaller

      - name: Add version to installer name
        run: |
          mv git-annex-installer.exe \
             git-annex-installer_"${{ steps.build-version.outputs.version }}".exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: git-annex-windows-installer_${{ steps.build-version.outputs.version }}
          path: |
            git-annex-installer_*.exe
            dist\build-version

      - name: Send e-mail on failed scheduled run
        if: "failure() && github.event_name == 'schedule'"
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: ${{ secrets.NOTIFY_SMTP_HOST }}
          server_port: ${{ secrets.NOTIFY_SMTP_PORT }}
          username: ${{ secrets.NOTIFY_SMTP_USERNAME }}
          password: ${{ secrets.NOTIFY_SMTP_PASSWORD }}
          from: GitHub Actions Notifications
          to: ${{ secrets.NOTIFY_RECIPIENT }}
          subject: '[${{ github.repository }}] Scheduled build on Windows failed!'
          body: |
            A scheduled build of git-annex for Windows failed!

            See <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}> for more information.

  test-annex:
    runs-on: windows-2016
    needs: build-package
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v2

      - name: Download git-annex package
        uses: actions/download-artifact@v2
        with:
          name: git-annex-windows-installer_${{ needs.build-package.outputs.build-version }}

      - name: Install git-annex package
        shell: powershell
        run: |
          ./git-annex-installer_*.exe /S

      - name: Check that magic files are installed
        run: |
          GIT_ANNEX_PATH="$(type -p git-annex)"
          echo "git-annex is at $GIT_ANNEX_PATH"
          GIT_ANNEX_DIR="$(dirname "$GIT_ANNEX_PATH")"
          ls "$GIT_ANNEX_DIR"/*magic* "$GIT_ANNEX_DIR"/*gnurx*
          ls "$GIT_ANNEX_DIR"/../share/misc/*magic*

      - name: Check git-annex version for MagicMime flag
        run: |
          git annex version | grep 'build flags:.*MagicMime'

      - name: Print git-annex version
        run: git annex version

      - name: Run tests
        run: |
          # Do it after we possibly setup HOME
          git config --global user.email "test@github.land"
          git config --global user.name "GitHub Almighty"

          cd $HOME
          export | grep -e crippledfs || :

          timeout 1800 git annex test

      - name: Send e-mail on failed scheduled run
        if: "failure() && github.event_name == 'schedule'"
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: ${{ secrets.NOTIFY_SMTP_HOST }}
          server_port: ${{ secrets.NOTIFY_SMTP_PORT }}
          username: ${{ secrets.NOTIFY_SMTP_USERNAME }}
          password: ${{ secrets.NOTIFY_SMTP_PASSWORD }}
          from: GitHub Actions Notifications
          to: ${{ secrets.NOTIFY_RECIPIENT }}
          subject: '[${{ github.repository }}] Scheduled tests of Windows build failed!'
          body: |
            The tests for a scheduled build of git-annex for Windows failed!

            See <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}> for more information.

# vim:set et sts=2:
