name: Build git-annex on {{osname}}

on:
  # Trigger the workflow on pull requests
  pull_request:
    paths:
      - '.github/workflows/build-{{ostype}}.yaml'
      - 'patches/*.patch'
  schedule:
    - cron: '30 {{cron_hour}} * * *'
  workflow_dispatch:
    inputs:
      commitish:
        description: The upstream commitish to build
      pr:
        description: The number of the PR to build

defaults:
  run:
    shell: bash

{% if env %}
env:
  {% for k,v in env.items() %}
  {{k}}: {{v}}
  {% endfor %}

{% endif %}
jobs:
  build-package:
    runs-on: {{runs_on}}
    outputs:
      build-version: ${{ steps.build-version.outputs.version }}
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create pending PR status
        if: github.event.inputs.pr != ''
        run: |
          .github/workflows/tools/set-pr-status \
            "${{ github.event.inputs.pr }}" \
            {{osname}} \
            build-package \
            pending
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    {% if ostype == "ubuntu" %}
      - name: Set up system
        run: |
          bash <(wget -q -O- http://neuro.debian.net/_files/neurodebian-travis.sh)
          sudo apt-get update -qq
          sudo apt-get install eatmydata
          sudo eatmydata apt-get install singularity-container gnupg moreutils strace

    {% elif ostype == "macos" %}
      - name: Set up system
        run: brew install libmagic pkg-config

    {% elif ostype == "windows" %}
      - name: Setup Haskell
        uses: actions/setup-haskell@v1.1.3
        with:
          enable-stack: true
          stack-no-global: true

      - name: Handle long filenames
        run: git config --system core.longpaths true

    {% endif %}
      - name: Determine git-annex ref to build
        run: |
          . .github/workflows/tools/set-build-commit
          echo "BUILD_COMMIT=$BUILD_COMMIT" >> "$GITHUB_ENV"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_PR: ${{ github.event.inputs.pr }}
          INPUT_COMMITISH: ${{ github.event.inputs.commitish }}

      - name: Check out source files
        run: |
          # The goal here is for $BUILD_COMMIT to be the HEAD (necessary for
          # git-annex's version detection to use the correct git commit) with
          # the contents of master — or whatever ref is being used as the
          # workflow source — also available.
          {% if ostype == "windows" %}
          git reset --soft "$BUILD_COMMIT"
          # Avoid checking out unnecessary files with paths that are invalid on
          # Windows.
          git ls-tree --name-only HEAD | grep -v '^doc$' | xargs git checkout HEAD
          git checkout HEAD doc/license ':(glob)doc/*.mdwn' ':(glob)doc/logo*'
          {% else %}
          git checkout "$BUILD_COMMIT"
          {% endif %}
          git checkout "$GITHUB_SHA" -- .

      - name: Get build version
        id: build-version
        run: |
          version="$(git describe "$BUILD_COMMIT" | sed -e 's/-/+git/')"
          {% if ostype == "ubuntu" %}
          arch="$(dpkg --print-architecture)"
          {% else %}
          arch=x64
          {% endif %}
          echo "Building $version"
          echo "::set-output name=version::${version}_$arch"

      - name: Apply local patches
        run: .github/workflows/tools/apply-patches patches
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    {% if ostype == "ubuntu" %}
      - name: Adjust changelog generation script to use original branch
        run: sed -i -e "s,HEAD,$BUILD_COMMIT,g" debian/create-standalone-changelog

      - name: Import GPG keys
        run: |
          # private key for signing - comes from secrets
          echo '${{ secrets.datalad_builder_gpgkey }}' | gpg --import
          # public key for verification
          gpg --import .github/workflows/tools/datalad-builder-key.asc

      - name: Get the git-annex build environment container
        run: chronic singularity pull --name buildenv.sif shub://datalad/datalad-extensions:buildenv-git-annex-buster
        working-directory: /tmp

      - name: Build source packages
        run: |
          chronic singularity exec /tmp/buildenv.sif make debianstandalone-dsc
          mv ../git-annex_*.* .

      - name: Build binary package from the source package
        run: |
          if ! singularity exec /tmp/buildenv.sif \
               bash -c 'set -x; export LANG=C; dpkg-source -x *.dsc git-annex-source && cd git-annex-source && dpkg-buildpackage -b' >| "${bbuild_log}" 2>&1; then
                 echo "E: build failed"
                 echo "I: the tail of the log"
                 tail -n 50 "${bbuild_log}"
                 echo "I: FAIL line matches with some context"
                 grep -B10 '^FAIL$' "${bbuild_log}"
                 exit 1
          fi

      - name: Check that all tests were run and passed
        run: grep -E '^All [[:digit:]]{3} tests passed' "${bbuild_log}"
        if: "!contains(env.DEB_BUILD_OPTIONS, 'nocheck')"

    {% elif ostype == "macos" %}
      - name: Configure build
        run: |
          echo OSX_MAGIC_FILE="$(brew list --verbose libmagic| grep magic.mgc | head -n 1)" >> "$GITHUB_ENV"
          echo BUILDERCOMMONOPTIONS="--stack-yaml stack.yaml.autobuild" >> "$GITHUB_ENV"
          echo BUILDER=stack >> "$GITHUB_ENV"
          echo GHC="stack --stack-yaml stack.yaml.autobuild ghc --" >> "$GITHUB_ENV"

      - name: Set stack.yaml.autobuild
        run: cat standalone/osx/stack.yaml > stack.yaml.autobuild

      - name: stack setup
        run: stack setup --stack-yaml stack.yaml.autobuild

      - name: Enable Stack cache
        uses: actions/cache@v2
        with:
          path: ~/.stack
          key: cache-stack-macos-${{ hashFiles('stack.yaml.autobuild.lock') }}-${{ hashFiles('git-annex.cabal') }}
          restore-keys: |
            cache-stack-macos-

      - name: Build git-annex
        run: make osxapp

      - name: Update version info for git rev being built.
        run: |
          mkdir -p dist
          make Build/BuildVersion
          ./Build/BuildVersion > dist/build-version

      - name: Add version to DMG name and move it
        run: |
          mv tmp/git-annex.dmg \
             git-annex_"${{ steps.build-version.outputs.version }}".dmg

    {% elif ostype == "windows" %}
      - name: Download and "install" libmagic for windows
        run: |
          gh release download -R datalad/file-windows -p file-windows-dist.zip
          unzip file-windows-dist.zip
          cp libmagic-1.dll libmagic.dll

      - name: Enable building with magic
        run: |
          perl -pli -e 's/magicmime: false/magicmime: true/' stack.yaml

      - name: Set UPGRADE_LOCATION
        run: |
          # This tells git-annex where to upgrade itself from.
          echo "UPGRADE_LOCATION=http://downloads.kitenet.net/git-annex/windows/current/git-annex-installer.exe" >> "$GITHUB_ENV"

      - name: Run stack --version
        run: stack --version

      - name: stack setup
        run: stack setup

      # At this point, stack.yaml.lock exists, so we can activate the cache

      - name: Enable Stack cache
        uses: actions/cache@v2
        with:
          path: 'C:\sr\snapshots'
          key: cache-stack-windows-${{ hashFiles('stack.yaml.lock') }}-${{ hashFiles('git-annex.cabal') }}
          restore-keys: |
            cache-stack-windows-

      - name: Build dependencies
        run: stack build --only-dependencies --extra-include-dirs=$PWD --extra-lib-dirs=$PWD

      - name: Update version info for git rev being built.
        run: |
          mkdir -p dist
          stack ghc --no-haddock Build/BuildVersion.hs
          ./Build/BuildVersion > dist/build-version

      - name: Build git-annex
        run: stack install --no-haddock --local-bin-path .

      - name: Build the installer
        run: |
          stack ghc --no-haddock --package nsis Build/NullSoftInstaller.hs
          TMP="$PWD" ./Build/NullSoftInstaller

      - name: Add version to installer name
        run: |
          mv git-annex-installer.exe \
             git-annex-installer_"${{ steps.build-version.outputs.version }}".exe

    {% endif %}
      - name: Upload packages
        uses: actions/upload-artifact@v2
        with:
          name: {{artifact_basename}}_${{ steps.build-version.outputs.version }}
          path: |
            git-annex[-_]*.*
            dist/build-version

      - name: Create new release
        if: github.event.inputs.commitish != ''
        run: |
          printf '[DEBUG] INPUT_COMMITISH=%b\n' "$INPUT_COMMITISH"
          if git rev-parse refs/tags/"$INPUT_COMMITISH" &> /dev/null
          then
              echo "[INFO] Building a tag; uploading assets to release ..."
              echo '[DEBUG] BEGIN gh release list'
              gh release list | tee releases.txt | cat -v
              echo '[DEBUG] END gh release list'
              if grep -q "^$INPUT_COMMITISH\b" releases.txt
              then
                  echo "[INFO] Release already exists; uploading assets"
                  gh release upload "$INPUT_COMMITISH" git-annex[-_]*.*
              else
                  echo "[INFO] Creating release"
                  gh release create \
                    --notes "This is an unofficial release build provided by the DataLad team." \
                    "$INPUT_COMMITISH" git-annex[-_]*.*
              fi
          else
              echo "[INFO] Not building a tag; no release to make"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_COMMITISH: ${{ github.event.inputs.commitish }}

      - name: Set final PR status
        if: always() && github.event.inputs.pr != ''
        run: |
          .github/workflows/tools/set-pr-status \
            "${{ github.event.inputs.pr }}" \
            {{osname}} \
            build-package \
            "${{ job.status }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send e-mail on failed scheduled run
        if: "failure() && github.event_name == 'schedule'"
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: ${{ secrets.NOTIFY_SMTP_HOST }}
          server_port: ${{ secrets.NOTIFY_SMTP_PORT }}
          username: ${{ secrets.NOTIFY_SMTP_USERNAME }}
          password: ${{ secrets.NOTIFY_SMTP_PASSWORD }}
          from: GitHub Actions Notifications
          to: ${{ secrets.NOTIFY_RECIPIENT }}
          subject: '[${{ github.repository }}] Scheduled build on {{osname}} failed!'
          body: |
            A scheduled build of git-annex for {{osname}} failed!

            See <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}> for more information.

  test-annex:
    runs-on: {{runs_on}}
    needs: build-package
  {% if test_annex_flavors %}
    strategy:
      matrix:
        flavor: {{test_annex_flavors|tojson}}
      fail-fast: false
  {% endif %}
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v2

      - name: Create pending PR status
        if: github.event.inputs.pr != ''
        run: |
          .github/workflows/tools/set-pr-status \
            "${{ github.event.inputs.pr }}" \
            {{osname}} \
            {% if test_annex_flavors %}
            "test-annex (${{ matrix.flavor }})" \
            {% else %}
            test-annex \
            {% endif %}
            pending
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download git-annex package
        uses: actions/download-artifact@v2
        with:
          name: {{artifact_basename}}_${{ needs.build-package.outputs.build-version }}

      - name: Install git-annex package
        {% if ostype == "windows" %}
        shell: powershell
        {% endif %}
        run: |
          {% for step in artifact_install_steps %}
          {{step}}
          {% endfor %}

    {% if ostype == "macos" %}
      - name: Install coreutils (for timeout)
        run: brew install coreutils

    {% elif ostype == "windows" %}
      - name: Check that magic files are installed
        run: |
          GIT_ANNEX_PATH="$(type -p git-annex)"
          echo "git-annex is at $GIT_ANNEX_PATH"
          GIT_ANNEX_DIR="$(dirname "$GIT_ANNEX_PATH")"
          ls "$GIT_ANNEX_DIR"/*magic* "$GIT_ANNEX_DIR"/*gnurx*
          ls "$GIT_ANNEX_DIR"/../share/misc/*magic*

      - name: Check git-annex version for MagicMime flag
        run: |
          git annex version | grep 'build flags:.*MagicMime'

    {% endif %}
      - name: Print git-annex version
        run: git annex version

      - name: Run tests
        run: |
        {% if (ostype == "ubuntu" or ostype == "macos") and test_annex_flavors %}
          if echo "${{ matrix.flavor }}" | grep -q "crippled" ; then
            # source so that CRIPPLEDFS_PATH will be set:
            . .github/workflows/tools/setup_crippledfs crippledfs 500
          fi
          if echo "${{ matrix.flavor }}" | grep -q "nfs" ; then
            mkdir /tmp/nfsmount_ /tmp/nfsmount
            echo "/tmp/nfsmount_ localhost(rw)" | sudo bash -c 'cat - > /etc/exports'
            sudo apt-get install -y nfs-kernel-server
            sudo exportfs -a
            sudo mount -t nfs localhost:/tmp/nfsmount_ /tmp/nfsmount
          fi

          case "${{ matrix.flavor }}" in
            # For git-annex it causes only few temporary directories to be on the crippled FS,
            # while the main ones produced by git annex test  reside in CWD, for which we use
            # $HOME
            crippled-tmp)
              export TMPDIR="$CRIPPLEDFS_PATH"
              ;;
            nfs-tmp)
              export TMPDIR=/tmp/nfsmount
              ;;
            # Also used as CWD where running the tests, so in effect tests annex operating
            # on those file systems
            crippled-home)
              export HOME="$CRIPPLEDFS_PATH"
              ;;
            nfs-home)
              export HOME=/tmp/nfsmount
              ;;
            normal)
              ;;
            *)
              echo "Unknown flavor ${{ matrix.flavor }}"
              exit 1
          esac

        {% endif %}
          # Do it after we possibly setup HOME
          git config --global user.email "test@github.land"
          git config --global user.name "GitHub Almighty"

          cd $HOME
          export | grep -e crippledfs || :

          timeout 1800 git annex test

      - name: Set final PR status
        if: always() && github.event.inputs.pr != ''
        run: |
          .github/workflows/tools/set-pr-status \
            "${{ github.event.inputs.pr }}" \
            {{osname}} \
            {% if test_annex_flavors %}
            "test-annex (${{ matrix.flavor }})" \
            {% else %}
            test-annex \
            {% endif %}
            "${{ job.status }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send e-mail on failed scheduled run
        if: "failure() && github.event_name == 'schedule'"
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: ${{ secrets.NOTIFY_SMTP_HOST }}
          server_port: ${{ secrets.NOTIFY_SMTP_PORT }}
          username: ${{ secrets.NOTIFY_SMTP_USERNAME }}
          password: ${{ secrets.NOTIFY_SMTP_PASSWORD }}
          from: GitHub Actions Notifications
          to: ${{ secrets.NOTIFY_RECIPIENT }}
          subject: '[${{ github.repository }}] Scheduled tests of {{osname}} build failed!'
          body: |
          {% if test_annex_flavors %}
            The tests for a scheduled build of git-annex for {{osname}} (flavor: ${{ matrix.flavor }}) failed!
          {% else %}
            The tests for a scheduled build of git-annex for {{osname}} failed!
          {% endif %}

            See <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}> for more information.

{% if ostype == "ubuntu" or ostype == "macos" %}
  test-annex-more:
    runs-on: {{runs_on}}
    needs: build-package
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v2

      - name: Create pending PR status
        if: github.event.inputs.pr != ''
        run: |
          .github/workflows/tools/set-pr-status \
            "${{ github.event.inputs.pr }}" \
            {{osname}} \
            test-annex-more \
            pending
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download git-annex package
        uses: actions/download-artifact@v2
        with:
          name: {{artifact_basename}}_${{ needs.build-package.outputs.build-version }}

      - name: Install git-annex package
        {% if ostype == "windows" %}
        shell: powershell
        {% endif %}
        run: |
          {% for step in artifact_install_steps %}
          {{step}}
          {% endfor %}

      - name: Seek of dynlibs
        run: |
          mkdir /tmp/testrepo; cd /tmp/testrepo; git init
          function nfailed() {
            strace -f git-annex "$1" 2>&1 | awk "/$2.*ENOENT/{print}" | tee /dev/fd/2 | wc -l
          }
          # We should get some reasonable number (not 40) of directories look up for dynamic libraries
          liblookups=
          PS4='> '; set -x
          test $(nfailed version "libpcre.*so") -lt 5
          test $(nfailed init "libpcre.*so") -lt 130

      - name: Set final PR status
        if: always() && github.event.inputs.pr != ''
        run: |
          .github/workflows/tools/set-pr-status \
            "${{ github.event.inputs.pr }}" \
            {{osname}} \
            test-annex-more \
            "${{ job.status }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

{% endif %}
{% if test_datalad %}
  test-datalad:
    runs-on: {{runs_on}}
    needs: build-package
    strategy:
      matrix:
        version: [master, maint, release]
      fail-fast: false
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v2

      - name: Create pending PR status
        if: github.event.inputs.pr != ''
        run: |
          .github/workflows/tools/set-pr-status \
            "${{ github.event.inputs.pr }}" \
            {{osname}} \
            "test-datalad (${{ matrix.version }})" \
            pending
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download git-annex package
        uses: actions/download-artifact@v2
        with:
          name: {{artifact_basename}}_${{ needs.build-package.outputs.build-version }}

      - name: Install git-annex package
        {% if ostype == "windows" %}
        shell: powershell
        {% endif %}
        run: |
          {% for step in artifact_install_steps %}
          {{step}}
          {% endfor %}

    {% if ostype == "ubuntu" %}
    {# TODO: return for macos! https://github.com/datalad/git-annex/issues/42
      {% if ostype == "ubuntu"  or ostype == "macos" %} #}
      - name: Set up SSH target
        shell: bash
        run: |
          {% if ostype == "macos" %}
          # coreutils provides a readlink that supports `-f`
          brew install coreutils docker docker-machine
          docker-machine --github-api-token="${{ secrets.GITHUB_TOKEN }}" create --driver virtualbox default
          eval "$(docker-machine env default)"
          export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
          {% endif %}
          curl -fSsL \
            https://raw.githubusercontent.com/datalad/datalad/master/tools/ci/prep-travis-forssh.sh \
            | bash
          echo DATALAD_TESTS_SSH=1 >> "$GITHUB_ENV"

   {% elif ostype == "windows" %}
      - name: Define test host alias
        shell: cmd
        run: |
          echo. >> %SYSTEMROOT%\System32\drivers\etc\hosts
          echo.127.0.0.1  datalad-test >> %SYSTEMROOT%\System32\drivers\etc\hosts
          echo.127.0.0.1  datalad-test2 >> %SYSTEMROOT%\System32\drivers\etc\hosts

      - name: OpenSSH server setup
        shell: powershell
        run: |
          mkdir downloads
          Invoke-WebRequest -Uri https://github.com/PowerShell/Win32-OpenSSH/releases/download/v7.6.1.0p1-Beta/OpenSSH-Win32.zip -OutFile downloads\openssh.zip
          7z x -o"downloads" downloads\openssh.zip

      - name: Install
        shell: cmd
        run: powershell.exe -ExecutionPolicy Bypass -File downloads\OpenSSH-Win32\install-sshd.ps1

      - name: Configure service
        shell: cmd
        run: powershell.exe New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22

      - name: Keys in default place
        run: ssh-keygen -f ~/.ssh/id_rsa -N ""

      - name: Authorize access with these keys
        shell: cmd
        run: |
          copy %USERPROFILE%\.ssh\id_rsa.pub %USERPROFILE%\.ssh\authorized_keys

      - name: Configure SSH
        run: |
          (
            echo Host localhost
            echo StrictHostKeyChecking no
            echo Host datalad-test
            echo StrictHostKeyChecking no
            echo Host datalad-test2
            echo StrictHostKeyChecking no
          ) > "$USERPROFILE"/.ssh/config

      - name: Fire up service
        run: net start sshd

      - name: Test login
        run: |
          ssh -v localhost exit
          ssh datalad-test exit
          ssh datalad-test2 exit

      - name: Enable SSH tests
        run: echo DATALAD_TESTS_SSH=1 >> "$GITHUB_ENV"
    {% endif %}

      - name: Set up environment
        run: |
          {% if ostype == "macos" %}
          brew install exempi  # Needed by python-xmp-toolkit
          {% endif %}
          git config --global user.email "test@github.land"
          git config --global user.name "GitHub Almighty"

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install ${{ matrix.version }} Datalad
        run: |
          if [ "${{ matrix.version }}" = "release" ]; then
            # Authorize so that we don't run up against low API rate limits
            commitish="$(curl -fsSL -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/datalad/datalad/releases/latest | jq -r .tag_name)"
          else
            commitish="${{ matrix.version }}"
          fi
          python -m pip install --upgrade pip
          pip install git+https://github.com/datalad/datalad@${commitish}

      - name: Install nose et al (just in case!)
        run: pip install nose vcrpy mock

      - name: WTF!?
        run: datalad wtf

      - name: Run datalad tests
        run: |
          mkdir -p __testhome__
          cd __testhome__
          python -m nose -s -v datalad

      - name: Set final PR status
        if: always() && github.event.inputs.pr != ''
        run: |
          .github/workflows/tools/set-pr-status \
            "${{ github.event.inputs.pr }}" \
            {{osname}} \
            "test-datalad (${{ matrix.version }})" \
            "${{ job.status }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

{% endif %}
# vim:set et sts=2:
