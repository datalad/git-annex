name: Build git-annex on macOS

on:
  # Trigger the workflow on pull requests
  pull_request:
    paths:
      - '.github/workflows/build-macos.yaml'
      - 'patches/*.patch'
  schedule:
    - cron: '30 01 * * *'
  workflow_dispatch:
    inputs:
      commitish:
        description: The upstream commitish to build
      pr:
        description: The number of the PR to build

defaults:
  run:
    shell: bash

env:
  LANG: C

jobs:
  build-package:
    runs-on: macos-latest
    outputs:
      build-version: ${{ steps.build-version.outputs.version }}
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create pending PR status
        if: github.event.inputs.pr != ''
        run: |
          .github/workflows/tools/set-pr-status "${{ github.event.inputs.pr }}" macOS pending
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up system
        run: brew install libmagic pkg-config

      - name: Determine git-annex ref to build
        run: |
          . .github/workflows/tools/set-build-commit
          echo "BUILD_COMMIT=$BUILD_COMMIT" >> "$GITHUB_ENV"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_PR: ${{ github.event.inputs.pr }}
          INPUT_COMMITISH: ${{ github.event.inputs.commitish }}

      - name: Check out source files
        run: git checkout "$BUILD_COMMIT" -- .

      - name: Get build version
        id: build-version
        run: |
          version="$(git describe "$BUILD_COMMIT" | sed -e 's/-/+git/')"
          arch=x64
          echo "Building $version"
          echo "::set-output name=version::${version}_$arch"

      - name: Apply local patches
        run: .github/workflows/tools/apply-patches patches
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure build
        run: |
          echo OSX_MAGIC_FILE="$(brew list --verbose libmagic| grep magic.mgc | head -n 1)" >> "$GITHUB_ENV"
          echo BUILDERCOMMONOPTIONS="--stack-yaml stack.yaml.autobuild" >> "$GITHUB_ENV"
          echo BUILDER=stack >> "$GITHUB_ENV"
          echo GHC="stack --stack-yaml stack.yaml.autobuild ghc --" >> "$GITHUB_ENV"

      - name: Set stack.yaml.autobuild
        run: cat standalone/osx/stack.yaml > stack.yaml.autobuild

      - name: stack setup
        run: stack setup --stack-yaml stack.yaml.autobuild

      - name: Enable Stack cache
        uses: actions/cache@v2
        with:
          path: ~/.stack
          key: cache-stack-macos-${{ hashFiles('stack.yaml.autobuild.lock') }}-${{ hashFiles('git-annex.cabal') }}
          restore-keys: |
            cache-stack-macos-

      - name: Build git-annex
        run: make osxapp

      - name: Add version to DMG name and move it
        run: |
          mv /tmp/git-annex.dmg \
             git-annex_"${{ steps.build-version.outputs.version }}".dmg

      - name: Upload packages
        uses: actions/upload-artifact@v2
        with:
          name: git-annex-macos-dmg_${{ steps.build-version.outputs.version }}
          path: |
            git-annex[-_]*.*
            dist/build-version

      - name: Set PR final build status
        if: always() && github.event.inputs.pr != ''
        run: |
          .github/workflows/tools/set-pr-status "${{ github.event.inputs.pr }}" macOS "${{ job.status }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send e-mail on failed scheduled run
        if: "failure() && github.event_name == 'schedule'"
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: ${{ secrets.NOTIFY_SMTP_HOST }}
          server_port: ${{ secrets.NOTIFY_SMTP_PORT }}
          username: ${{ secrets.NOTIFY_SMTP_USERNAME }}
          password: ${{ secrets.NOTIFY_SMTP_PASSWORD }}
          from: GitHub Actions Notifications
          to: ${{ secrets.NOTIFY_RECIPIENT }}
          subject: '[${{ github.repository }}] Scheduled build on macOS failed!'
          body: |
            A scheduled build of git-annex for macOS failed!

            See <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}> for more information.

  test-annex:
    runs-on: macos-latest
    needs: build-package
    strategy:
      matrix:
        flavor: ["normal", "crippled-tmp"]
      fail-fast: false
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v2

      - name: Download git-annex package
        uses: actions/download-artifact@v2
        with:
          name: git-annex-macos-dmg_${{ needs.build-package.outputs.build-version }}

      - name: Install git-annex package
        run: |
          hdiutil attach git-annex_*.dmg
          rsync -a /Volumes/git-annex/git-annex.app /Applications/
          hdiutil detach /Volumes/git-annex/
          echo /Applications/git-annex.app/Contents/MacOS >> "$GITHUB_PATH"

      - name: Install coreutils (for timeout)
        run: brew install coreutils

      - name: Print git-annex version
        run: git annex version

      - name: Run tests
        run: |
          if echo "${{ matrix.flavor }}" | grep -q "crippled" ; then
            # source so that CRIPPLEDFS_PATH will be set:
            . .github/workflows/tools/setup_crippledfs crippledfs 500
          fi
          if echo "${{ matrix.flavor }}" | grep -q "nfs" ; then
            mkdir /tmp/nfsmount_ /tmp/nfsmount
            echo "/tmp/nfsmount_ localhost(rw)" | sudo bash -c 'cat - > /etc/exports'
            sudo apt-get install -y nfs-kernel-server
            sudo exportfs -a
            sudo mount -t nfs localhost:/tmp/nfsmount_ /tmp/nfsmount
          fi

          case "${{ matrix.flavor }}" in
            crippled-tmp)
              # forces all test repos/paths into the VFAT FS
              export TMPDIR="$CRIPPLEDFS_PATH"
              ;;
            crippled-home)
              export HOME="$CRIPPLEDFS_PATH"
              ;;
            nfs-tmp)
              export TMPDIR=/tmp/nfsmount
              ;;
            nfs-home)
              export HOME=/tmp/nfsmount
              ;;
            normal)
              ;;
            *)
              echo "Unknown flavor ${{ matrix.flavor }}"
              exit 1
          esac

          # Do it after we possibly setup HOME
          git config --global user.email "test@github.land"
          git config --global user.name "GitHub Almighty"

          cd $HOME
          export | grep -e crippledfs || :

          timeout 1800 git annex test

      - name: Send e-mail on failed scheduled run
        if: "failure() && github.event_name == 'schedule'"
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: ${{ secrets.NOTIFY_SMTP_HOST }}
          server_port: ${{ secrets.NOTIFY_SMTP_PORT }}
          username: ${{ secrets.NOTIFY_SMTP_USERNAME }}
          password: ${{ secrets.NOTIFY_SMTP_PASSWORD }}
          from: GitHub Actions Notifications
          to: ${{ secrets.NOTIFY_RECIPIENT }}
          subject: '[${{ github.repository }}] Scheduled tests of macOS build failed!'
          body: |
            The tests for a scheduled build of git-annex for macOS (flavor: ${{ matrix.flavor }}) failed!

            See <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}> for more information.

  test-annex-more:
    runs-on: macos-latest
    needs: build-package
    steps:
      - name: Download git-annex package
        uses: actions/download-artifact@v2
        with:
          name: git-annex-macos-dmg_${{ needs.build-package.outputs.build-version }}

      - name: Install git-annex package
        run: |
          hdiutil attach git-annex_*.dmg
          rsync -a /Volumes/git-annex/git-annex.app /Applications/
          hdiutil detach /Volumes/git-annex/
          echo /Applications/git-annex.app/Contents/MacOS >> "$GITHUB_PATH"

      - name: Seek of dynlibs
        run: |
          mkdir /tmp/testrepo; cd /tmp/testrepo; git init
          function nfailed() {
            strace -f git-annex "$1" 2>&1 | awk "/$2.*ENOENT/{print}" | tee /dev/fd/2 | wc -l
          }
          # We should get some reasonable number (not 40) of directories look up for dynamic libraries
          liblookups=
          PS4='> '; set -x
          test $(nfailed version "libpcre.*so") -lt 5
          test $(nfailed init "libpcre.*so") -lt 130

  test-datalad:
    runs-on: macos-latest
    needs: build-package
    strategy:
      matrix:
        version: [master, maint, release]
      fail-fast: false
    steps:
      - name: Download git-annex package
        uses: actions/download-artifact@v2
        with:
          name: git-annex-macos-dmg_${{ needs.build-package.outputs.build-version }}

      - name: Install git-annex package
        run: |
          hdiutil attach git-annex_*.dmg
          rsync -a /Volumes/git-annex/git-annex.app /Applications/
          hdiutil detach /Volumes/git-annex/
          echo /Applications/git-annex.app/Contents/MacOS >> "$GITHUB_PATH"

      - name: Set up SSH target
        shell: bash
        # TODO: Drop the release condition once 0.13.2 is released.
        run: |
          if [ "${{ matrix.version }}" != "release" ]; then
            # coreutils provides a readlink that supports `-f`
            brew install coreutils docker docker-machine
            docker-machine --github-api-token="${{ secrets.GITHUB_TOKEN }}" create --driver virtualbox default
            eval "$(docker-machine env default)"
            export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
            curl -fSsL \
              https://raw.githubusercontent.com/datalad/datalad/master/tools/ci/prep-travis-forssh.sh \
              | bash
            echo DATALAD_TESTS_SSH=1 >> "$GITHUB_ENV"
          fi

      - name: Set up environment
        run: |
          brew install exempi  # Needed by python-xmp-toolkit
          git config --global user.email "test@github.land"
          git config --global user.name "GitHub Almighty"

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install ${{ matrix.version }} Datalad
        run: |
          if [ "${{ matrix.version }}" = "release" ]; then
            # Authorize so that we don't run up against low API rate limits
            commitish="$(curl -fsSL -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/datalad/datalad/releases/latest | jq -r .tag_name)"
          else
            commitish="${{ matrix.version }}"
          fi
          python -m pip install --upgrade pip
          pip install https://github.com/datalad/datalad/archive/${commitish}.zip

      - name: Install nose et al (just in case!)
        run: pip install nose vcrpy mock

      - name: WTF!?
        run: datalad wtf

      - name: Run datalad tests
        run: |
          mkdir -p __testhome__
          cd __testhome__
          python -m nose -s -v datalad

# vim:set et sts=2:
