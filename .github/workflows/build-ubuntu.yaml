name: Build git-annex on Ubuntu

on:
  # Trigger the workflow on pull request,
  pull_request:
    paths:
      - '.github/workflows/build-ubuntu.yaml'
  schedule:
    - cron: '30 02 * * *'
  workflow_dispatch:
    inputs:
      commitish:
        description: The upstream commitish to build
      pr:
        description: The number of the PR to build

env:
  LANG: C
  DEB_SIGN_KEYID: 13A1093296154584245E0300C98FC49D36DAB17F
  DEB_BUILD_OPTIONS: nocheck
  bbuild_log: git-annex-build.log

jobs:
  build-package:
    runs-on: ubuntu-latest
    outputs:
      build-version: ${{ steps.build-version.outputs.version }}
    steps:
      - name: Set up system
        shell: bash
        run: |
          bash <(wget -q -O- http://neuro.debian.net/_files/neurodebian-travis.sh)
          sudo apt-get update -qq
          sudo apt-get install eatmydata
          sudo eatmydata apt-get install singularity-container gnupg moreutils strace

      - name: Checkout this repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: git-annex

      - name: Determine git-annex ref to build
        run: |
          . .github/workflows/tools/set-build-commit
          echo "BUILD_COMMIT=$BUILD_COMMIT" >> "$GITHUB_ENV"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_PR: ${{ github.event.inputs.pr }}
          INPUT_COMMITISH: ${{ github.event.inputs.commitish }}
        working-directory: git-annex

      - name: Check out source files
        run: git checkout "$BUILD_COMMIT" -- .
        working-directory: git-annex

      - name: Adjust changelog generation script to use original branch
        run: sed -i -e "s,HEAD,$BUILD_COMMIT,g" debian/create-standalone-changelog
        working-directory: git-annex

      - name: Import GPG keys
        run: |
          # private key for signing - comes from secrets
          echo '${{ secrets.datalad_builder_gpgkey }}' | gpg --import
          # public key for verification
          gpg --import .github/workflows/tools/datalad-builder-key.asc
        working-directory: git-annex

      - name: Get build version
        id: build-version
        run: |
          version="$(git describe "$BUILD_COMMIT" | sed -e 's/-/+git/')"
          arch="$(dpkg --print-architecture)"
          echo "Building $version"
          echo "::set-output name=version::${version}_$arch"
        working-directory: git-annex

      - name: Apply local patches
        run: .github/workflows/tools/apply-patches patches
        working-directory: git-annex
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get the git-annex build environment container
        run: chronic singularity pull --name buildenv.sif shub://datalad/datalad-extensions:buildenv-git-annex-buster

      - name: Build source packages
        run: chronic singularity exec ./buildenv.sif make -C git-annex debianstandalone-dsc

      - name: Build binary package from the source package
        run: |
          if ! singularity exec ./buildenv.sif \
               bash -c 'set -x; export LANG=C; dpkg-source -x *.dsc git-annex-source && cd git-annex-source && dpkg-buildpackage -b' >| "${bbuild_log}" 2>&1; then
                 echo "E: build failed"
                 echo "I: the tail of the log"
                 tail -n 50 "${bbuild_log}"
                 echo "I: FAIL line matches with some context"
                 grep -B10 '^FAIL$' "${bbuild_log}"
                 exit 1
          fi

      - name: Check that all tests were run and passed
        run: grep -E '^All [[:digit:]]{3} tests passed' "${bbuild_log}"
        if: "!contains(env.DEB_BUILD_OPTIONS, 'nocheck')"

      - name: Upload packages
        uses: actions/upload-artifact@v2
        with:
          name: git-annex-debianstandalone-packages_${{ steps.build-version.outputs.version }}
          path: git-annex[-_]*.*

      - name: Send e-mail on failed scheduled run
        if: "failure() && github.event_name == 'schedule'"
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: ${{ secrets.NOTIFY_SMTP_HOST }}
          server_port: ${{ secrets.NOTIFY_SMTP_PORT }}
          username: ${{ secrets.NOTIFY_SMTP_USERNAME }}
          password: ${{ secrets.NOTIFY_SMTP_PASSWORD }}
          from: GitHub Actions Notifications
          to: ${{ secrets.NOTIFY_RECIPIENT }}
          subject: '[${{ github.repository }}] Scheduled build on Ubuntu failed!'
          body: |
            A scheduled build of git-annex for Ubuntu failed!

            See <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}> for more information.

  test-annex:
    runs-on: ubuntu-latest
    needs: build-package
    strategy:
      matrix:
        # TODO: add , nfs-home
        # https://git-annex.branchable.com/bugs/running_tests_on_NFS_HOME_does_not_exit_cleanly__58___gpgtmp/
        flavor: [normal, crippled-tmp, crippled-home, nfs-tmp]
      fail-fast: false
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v2

      - name: Download git-annex package
        uses: actions/download-artifact@v2
        with:
          name: git-annex-debianstandalone-packages_${{ needs.build-package.outputs.build-version }}

      - name: Install git-annex package
        run: sudo dpkg -i git-annex*.deb

      - name: Print git-annex version
        run: git annex version

      - name: Run tests
        run: |
          if echo "${{ matrix.flavor }}" | grep -q "crippled" ; then
            # source so that CRIPPLEDFS_PATH will be set:
            . .github/workflows/tools/setup_crippledfs crippledfs 500
          fi
          if echo "${{ matrix.flavor }}" | grep -q "nfs" ; then
            mkdir /tmp/nfsmount_ /tmp/nfsmount
            echo "/tmp/nfsmount_ localhost(rw)" | sudo bash -c 'cat - > /etc/exports'
            sudo apt-get install -y nfs-kernel-server
            sudo exportfs -a
            sudo mount -t nfs localhost:/tmp/nfsmount_ /tmp/nfsmount
          fi

          case "${{ matrix.flavor }}" in
            crippled-tmp)
              # forces all test repos/paths into the VFAT FS
              export TMPDIR="$CRIPPLEDFS_PATH"
              ;;
            crippled-home)
              export HOME="$CRIPPLEDFS_PATH"
              ;;
            nfs-tmp)
              export TMPDIR=/tmp/nfsmount
              ;;
            nfs-home)
              export HOME=/tmp/nfsmount
              ;;
            normal)
              ;;
            *)
              echo "Unknown flavor ${{ matrix.flavor }}"
              exit 1
          esac

          # Do it after we possibly setup HOME
          git config --global user.email "test@github.land"
          git config --global user.name "GitHub Almighty"

          cd $HOME
          export | grep -e crippledfs || :

          git annex test

      - name: Send e-mail on failed scheduled run
        if: "failure() && github.event_name == 'schedule'"
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: ${{ secrets.NOTIFY_SMTP_HOST }}
          server_port: ${{ secrets.NOTIFY_SMTP_PORT }}
          username: ${{ secrets.NOTIFY_SMTP_USERNAME }}
          password: ${{ secrets.NOTIFY_SMTP_PASSWORD }}
          from: GitHub Actions Notifications
          to: ${{ secrets.NOTIFY_RECIPIENT }}
          subject: '[${{ github.repository }}] Scheduled tests of Ubuntu build failed!'
          body: |
            The tests for a scheduled build of git-annex for Ubuntu failed for the following matrix:

            ${{ toJSON(matrix) }}

            See <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}> for more information.

  test-annex-more:
    runs-on: ubuntu-latest
    needs: build-package
    steps:
      - name: Download git-annex package
        uses: actions/download-artifact@v2
        with:
          name: git-annex-debianstandalone-packages_${{ needs.build-package.outputs.build-version }}

      - name: Install git-annex package
        run: sudo dpkg -i git-annex*.deb

      - name: Seek of dynlibs
        run: |
          mkdir /tmp/testrepo; cd /tmp/testrepo; git init
          function nfailed() {
            strace -f git-annex "$1" 2>&1 | awk "/$2.*ENOENT/{print}" | tee /dev/fd/2 | wc -l
          }
          # We should get some reasonable number (not 40) of directories look up for dynamic libraries
          liblookups=
          PS4='> '; set -x
          test $(nfailed version "libpcre.*so") -lt 5
          test $(nfailed init "libpcre.*so") -lt 130

  test-datalad:
    runs-on: ubuntu-latest
    needs: build-package
    strategy:
      matrix:
        version: [master, maint, release]
      fail-fast: false
    steps:
      - name: Download git-annex package
        uses: actions/download-artifact@v2
        with:
          name: git-annex-debianstandalone-packages_${{ needs.build-package.outputs.build-version }}

      - name: Install git-annex package
        run: sudo dpkg -i git-annex*.deb

      - name: Set up SSH target
        shell: bash
        # TODO: Drop the release condition once 0.13.2 is released.
        run: |
          if [ "${{ matrix.version }}" != "release" ]; then
            curl -fSsL \
              https://raw.githubusercontent.com/datalad/datalad/master/tools/ci/prep-travis-forssh.sh \
              | bash
            echo DATALAD_TESTS_SSH=1 >> "$GITHUB_ENV"
          fi

      - name: Set up environment
        run: |
          git config --global user.email "test@github.land"
          git config --global user.name "GitHub Almighty"

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: install ${{ matrix.version }} datalad
        run: |
          if [ "${{ matrix.version }}" = "release" ]; then
            # Authorize so that we don't run up against low API rate limits
            commitish="$(curl -fsSL -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/datalad/datalad/releases/latest | jq -r .tag_name)"
          else
            commitish="${{ matrix.version }}"
          fi
          python -m pip install --upgrade pip
          pip install https://github.com/datalad/datalad/archive/${commitish}.zip

      - name: Install nose et al (just in case!)
        run: pip install nose vcrpy mock

      - name: WTF!?
        run: datalad wtf

      - name: Run datalad tests
        run: |
          mkdir -p __testhome__
          cd __testhome__
          python -m nose -s -v datalad

# vim:set sts=2:
