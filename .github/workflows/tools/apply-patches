#!/usr/bin/env bash
set -eux -o pipefail

patches_dir="$1"
event="$2"

if [ ! -d "$patches_dir" ]
then
    echo "[INFO] Patch directory not found; doing nothing"
    exit 0
fi

# Needed for `git commit`:
git config --global user.email "test@github.land"
git config --global user.name "GitHub Almighty"

find "$patches_dir" -type f '!' -name '.*' -print | sort | while read -r patchfile
do
    echo "[INFO] Applying patch $patchfile"
    # Test whether the patch has already been applied by seeing if it can be
    # applied in reverse
    if git apply -R --check "$patchfile"
    then
        if [ "$event" = "pull_request" ]
        then echo "[ERROR] $patchfile is already applied upstream."
             exit 1
        fi
        echo "[INFO] $patchfile is already applied.  Creating PR to remove."
        branch_name="rmpatch/$(basename "$patchfile" .patch)"
        if gh api "repos/$GITHUB_REPOSITORY/branches/$branch_name" > /dev/null
        then
            echo "[INFO] Branch $branch_name already exists; assuming PR already exists"
        else
            tmpdir="$(mktemp -d)"
            # --no-single-branch is needed so that `git push -u` will create a
            # remote tracking branch, which is needed for `gh pr create`.
            git clone --depth 1 --no-single-branch "$(git remote get-url origin | sed "s,https://,https://x-access-token:$GITHUB_TOKEN@,")" "$tmpdir"
            cd "$tmpdir"
            git checkout -b "$branch_name"
            git rm "$patchfile"
            git commit -m "Delete patch $(basename "$patchfile")"
            git push -u origin "$branch_name"
            gh pr create --title "Delete patch $(basename "$patchfile")" --body "The patch \`$patchfile\` has been applied upstream.  This PR removes it from the local patch directory."
            cd -
        fi
    elif git apply "$patchfile"
    then echo "[INFO] Patch applied cleanly"
    else
        if [ "$event" = "pull_request" ]
        then echo "[ERROR] $patchfile failed to apply."
             exit 1
        fi
        echo "[ERROR] $patchfile failed to apply; creating issue"
        issue_title="Patch $(basename "$patchfile") fails to apply"
        if gh api -X GET \
            -f state=open -f per_page=100 -f sort=created -f direction=desc \
            "repos/$GITHUB_REPOSITORY/issues" \
            | jq -e --arg title "$issue_title" 'any(.[].title; . == $title)'
        then
            echo "[INFO] Issue already exists"
        else
            gh issue create --title "$issue_title" --body "The patch \`$patchfile\` failed to apply cleanly.  See <https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID> for more information."
        fi
        echo "[ERROR] Erroring out"
        exit 1
    fi
done
