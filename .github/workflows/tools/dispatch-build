#!/usr/bin/env python3
from __future__ import annotations
from collections.abc import Sequence
import click
from ghreq import Client, make_user_agent
from ghtoken import get_ghtoken

__python_requires__ = ">= 3.9"
__requires__ = ["click ~= 8.0", "ghreq ~= 0.2", "ghtoken ~= 0.1"]

REPO = "datalad/git-annex"
ALL_OS_TYPES = ("macos", "ubuntu", "windows")


class BuildDispatcher(Client):
    def dispatch(self, workflow: str, payload: dict) -> None:
        self.post(f"/repos/{REPO}/actions/workflows/{workflow}/dispatches", payload)

    def build_pr(
        self,
        pr: int,
        ostypes: Sequence[str] = ALL_OS_TYPES,
        workflow_ref: str = "master",
    ) -> None:
        for o in ostypes:
            self.dispatch(
                f"build-{o}.yaml", {"ref": workflow_ref, "inputs": {"pr": str(pr)}}
            )

    def build_commitish(
        self,
        commitish: str,
        ostypes: Sequence[str] = ALL_OS_TYPES,
        workflow_ref: str = "master",
    ) -> None:
        for o in ostypes:
            self.dispatch(
                f"build-{o}.yaml",
                {"ref": workflow_ref, "inputs": {"commitish": commitish}},
            )

    def build_latest(
        self, ostypes: Sequence[str] = ALL_OS_TYPES, workflow_ref: str = "master"
    ) -> None:
        for o in ostypes:
            self.dispatch(f"build-{o}.yaml", {"ref": workflow_ref, "inputs": {}})


@click.command()
@click.option(
    "--os",
    "ostypes",
    type=click.Choice(ALL_OS_TYPES),
    multiple=True,
    default=ALL_OS_TYPES,
    help="Specify an OS to build on [multiple use; default: all]",
)
@click.option("--pr", is_flag=True, help="Build a pull request")
@click.option(
    "-w",
    "--workflow-ref",
    default="master",
    help="The ref from which to acquire the workflow",
    show_default=True,
)
@click.argument("ref", required=False)
def main(
    ostypes: tuple[str, ...], pr: bool, ref: str | None, workflow_ref: str
) -> None:
    """
    Trigger builds of datalad/git-annex.

    Builds can be triggered for the latest code on upstream/master, for a pull
    request, or for an arbitrary commitish in the repository.

    * To build the latest code on upstream/master, run the script without any
      arguments:

        python3 dispatch-build.py [<options>]

    * To build a pull request, pass the `--pr` option and the number of the PR:

        python3 dispatch-build.py [<options>] --pr 42

    When building a PR, the actual commit that gets built is the
    GitHub-supplied result of merging the PR.  If the PR is not mergeable, the
    result is undefined.

    * To build an arbitrary commitish, specify it as the argument to the
      script.  Note that branches must be prefixed with "origin/" as they are
      not checked out by default.

    \b
         # Build a tag:
         python3 dispatch-build.py [<options>] 8.20201116

    \b
         # Build a branch:
         python3 dispatch-build.py [<options>] origin/my-fix

    \b
         # Build a commit hash:
         python3 dispatch-build.py [<options>] 65131af

    This script requires a GitHub access token with appropriate permissions in
    order to run.  Specify the token via the `GH_TOKEN` or `GITHUB_TOKEN`
    environment variable (possibly in an `.env` file), by storing a token with
    the `gh` or `hub` command, or by setting the `hub.oauthtoken` Git config
    option in your `~/.gitconfig` file.
    """
    user_agent = make_user_agent(
        "dispatch-build", url="https://github.com/datalad/git-annex"
    )
    with BuildDispatcher(token=get_ghtoken(), user_agent=user_agent) as client:
        if pr:
            if ref is None:
                raise click.UsageError("--pr requires a PR number")
            else:
                try:
                    pr_num = int(ref)
                except ValueError:
                    raise click.UsageError("--pr requires a PR number")
                client.build_pr(pr_num, ostypes, workflow_ref=workflow_ref)
        elif ref is not None:
            client.build_commitish(ref, ostypes, workflow_ref=workflow_ref)
        else:
            client.build_latest(ostypes, workflow_ref=workflow_ref)


if __name__ == "__main__":
    main()
