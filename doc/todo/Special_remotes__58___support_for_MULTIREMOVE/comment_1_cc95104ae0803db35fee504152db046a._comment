[[!comment format=mdwn
 username="joey"
 subject="""comment 1"""
 date="2022-09-13T16:02:58Z"
 content="""
This extension to the protocol would only be useful when removing chunks,
because otherwise git-annex doesn't have a way to build up a list of keys
that are going to be removed, in a way that could usefully be sent to the
external special remote together.

For chunks, it has a list of keys. So this is feasible.

I wonder if it's necessary to extend the protocol though. If an external
special remote wants to, it can buffer a list of keys that it's been told
to remove, and return REMOVE-SUCCESS to each request before actually
doing the removal. It could then
remove all the buffered keys in a single API call or whatever.

The risk of course is that if the removal fails, or it's interrupted before
it can do the removal, it will have incorrectly claimed to remove the keys.
And git-annex will have recorded incorrect information and wrongly
indicated the removal succeeded. This would not be a good idea for non-chunk
keys (although `fsck --fast --from` the remote could recover from it).

For a set of chunk keys that are all chunks of the same key, though,
git-annex doesn't record anything until they've all been successfully
removed. Also, it so happens that after asking for all the chunked keys to
be removed, git-annex normally[1] then asks for the unchunked key to be
removed too. So, a special remote could buffer chunked keys until it sees
an unchunked key, and then remove them all efficiently, and reply to the
removal of the unchunked key with the combined result of all the removals.

[1] The exception is that, if the special remote is not currently
configured to use chunking, git-annex happens to remove the unchunked key
first, followed by all the chunked keys. I don't think there is a good
reason for this in removal; it's a useful optimisation for retrieving
content that happens to affect removal too.
"""]]
