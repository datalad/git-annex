While looking for various spots where `core.quotepath=true` is now treated by git-annex ([ref](https://github.com/datalad/datalad/pull/7372#issuecomment-1533507701)) I found that `unannex` doesn't have `--json` and we do some really ad-hoc splitting which fails with spaces and we never actually tested enough.  With all the `quotepath` and other fun, we really should get machine-readable, thus `--json`, output for all annex commands IMHO. E.g. `unannex` has recently come up within treatment of BIDS datasets, and so far we were lucky that BIDS filenames do not allow for spaces in the filenames, but there is always `derivatives/` and `sourcedata/` which are not formalized and could have all kinds of odd filenames.

[[!meta author=yoh]]
[[!tag projects/repronim]]

These commands have been updated to support --json:

* git-annex-unannex
* git-annex-rmurl 
* git-annex-log
* git-annex-fix
* git-annex-setpresentkey
* git-annex-rekey

Provisional list of commands that don't support --json and maybe should:

(Feel free to reorder things to the top)

* git-annex-whereused
* git-annex-addunused
* git-annex-adjust
* git-annex-backends
* git-annex-config
* git-annex-configremote
* git-annex-dead
* git-annex-describe
* git-annex-dropunused
* git-annex-edit
* git-annex-enable-tor
* git-annex-enableremote
* git-annex-expire
* git-annex-filter-branch
* git-annex-forget
* git-annex-group
* git-annex-groupwanted
* git-annex-importfeed
* git-annex-init
* git-annex-initremote
* git-annex-inprogress
* git-annex-merge
* git-annex-migrate
* git-annex-mincopies
* git-annex-multicast
* git-annex-numcopies
* git-annex-preferred-content
* git-annex-reinit
* git-annex-reinject
* git-annex-remotedaemon
* git-annex-renameremote
* git-annex-repair
* git-annex-required
* git-annex-schedule
* git-annex-semitrust
* git-annex-sync
* git-annex-trust
* git-annex-undo
* git-annex-ungroup
* git-annex-uninit
* git-annex-untrust
* git-annex-unused
* git-annex-upgrade
* git-annex-vadd
* git-annex-vcycle
* git-annex-version
* git-annex-vfilter
* git-annex-vicfg
* git-annex-view
* git-annex-vpop
* git-annex-wanted

These commands have been reviewed and should not support json:

* git-annex-contentlocation, git-annex-lookupkey, git-annex-calckey,
  (plumbing, output already machine parseable)
* git-annex-setkey (plumbing)
* git-annex-checkpresentkey (plumbing, has batch interface with machine
  parseable output)
* git-annex-readpresentkey (plumbing, no output)
* git-annex-matchexpression (no output)
* git-annex-list (because it's a compact display of whereis so no new information)
* git-annex-direct (deprecated noop)
* git-annex findref (deprecated, can use find to do same thing)
* git-annex indirect (deprecated noop)
* git-annex proxy (deprecated and displays git command output so nothing
  structured)
* git-annex-pre-commit (used internally)
* git-annex-post-receive (used internally)
* git-annex-smudge, git-annex-filter-process (run by git)
* git-annex-p2p (used internally)
* git-annex-shell (run by git)
* git-annex-assistant (too high level)
* git-annex-watch (too high level and a daemon)
* git-annex-webapp (too high level)
* git-annex-test, git-annex testremote (ouput not useful to consume and generated by tasty)
* git-annex-fuzztest (output not useful to consume)
* git-annex-map (already generates machine-parseable output file, stdout is incidental)
* git-annex-transferkey, git-annex-transferkeys (plumbing)
* git-annex-transferrer (plumbing, has its own protocol)
* git-annex-resolvemerge (no output except to stderr)
* git-annex-diffdriver (run by git)
* git-annex-restage (no output)
* git-annex-benchmark (no useful output, and output generated by criterion)
