[[!comment format=mdwn
 username="joey"
 subject="""Re: comment 6"""
 date="2023-04-25T21:10:21Z"
 content="""
Oh well spotted yarikoptic! I wish I had noticed your comment 2 hours ago,
but I was head down implementing --json-exceptions.

Ok, so `addurl` does `giveup "bad url"` and that does indeed result in json
output that lacks a `key` and has `"file":null` as well.

I'm sure that somewhere in `git-annex add`, it's possible for it to
`giveup` with an error too. Oh of course... a device file!

	joey@darkstar:/home/joey/tmp/xxx>git-annex add --force-small null --json --json-error-messages
	{"command":"add","error-messages":["git-annex: null is not a regular file"],"file":"null","input":["null"],"note":"adding content to git repository","success":false}
	add: 1 failed

Other perhaps more likely cases where add can `giveup` include when it's unable
to remove all write perms due to an xattr, and probably some permissions
problems.

So, json consumers of add already have to deal with the `key` being missing.

Now, it might be that some git-annex commands don't `giveup`, so this would be
a new complication for consumers of their json. But so would adding a `giveup`
for any reason to a command, and I don't worry about that.

While I've implemented --json-exceptions, I don't like the complexity, so this new
information inclines me to rip it back out and instead handle the case of the
nonexistant file like:

	{"command":"add","exception":"UNIQUEID","file":"foo","input":["foo"],"error-messages":["foo not found"],"success":false}
"""]]
