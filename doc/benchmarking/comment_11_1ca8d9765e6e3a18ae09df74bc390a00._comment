[[!comment format=mdwn
 username="joey"
 subject="""comment 11"""
 date="2017-05-15T21:56:52Z"
 content="""
Switched from MissingH to cryptonite for md5. It did move md5 out of the top CPU spot but
the overall runtime didn't change much. Memory allocations did go down by a
good amount.

Updated profiles:

	           git-annex +RTS -p -RTS find
	
	        total time  =        1.63 secs   (1629 ticks @ 1000 us, 1 processor)
	        total alloc = 1,496,336,496 bytes  (excludes profiling overheads)
	
	COST CENTRE              MODULE                     SRC                                             %time %alloc
	
	catchIO                  Utility.Exception          Utility/Exception.hs:79:1-17                     14.1   15.1
	inAnnex'.checkindirect   Annex.Content              Annex/Content.hs:(108,9)-(119,39)                10.6    4.8
	catches                  Control.Monad.Catch        src/Control/Monad/Catch.hs:(432,1)-(436,76)       8.6    6.9
	spanList                 Data.List.Utils            src/Data/List/Utils.hs:(150,1)-(155,36)           6.7   11.1
	isAnnexLink              Annex.Link                 Annex/Link.hs:35:1-85                             5.0   10.2
	keyFile                  Annex.Locations            Annex/Locations.hs:(456,1)-(462,19)               5.0    7.0
	readish                  Utility.PartialPrelude     Utility/PartialPrelude.hs:(48,1)-(50,20)          3.8    2.0
	startswith               Data.List.Utils            src/Data/List/Utils.hs:103:1-23                   3.6    2.3
	splitc                   Utility.Misc               Utility/Misc.hs:(52,1)-(54,25)                    3.4    6.5
	s2w8                     Data.Bits.Utils            src/Data/Bits/Utils.hs:65:1-15                    2.6    6.4
	keyPath                  Annex.Locations            Annex/Locations.hs:(492,1)-(494,23)               2.5    4.4
	fileKey.unesc            Annex.Locations            Annex/Locations.hs:(469,9)-(474,39)               2.0    3.5
	copyAndFreeze            Data.ByteArray.Methods     Data/ByteArray/Methods.hs:(224,1)-(227,21)        1.8    0.5

	           git-annex +RTS -p -RTS find --not --in web
	
	        total time  =        5.33 secs   (5327 ticks @ 1000 us, 1 processor)
	        total alloc = 2,908,489,000 bytes  (excludes profiling overheads)
	
	COST CENTRE          MODULE                     SRC                                             %time %alloc
	
	catObjectDetails.\   Git.CatFile                Git/CatFile.hs:(80,72)-(88,97)                    7.8    2.8
	catchIO              Utility.Exception          Utility/Exception.hs:79:1-17                      7.6    8.3
	spanList             Data.List.Utils            src/Data/List/Utils.hs:(150,1)-(155,36)           5.8    9.1
	readish              Utility.PartialPrelude     Utility/PartialPrelude.hs:(48,1)-(50,20)          4.5    4.0
	parseResp            Git.CatFile                Git/CatFile.hs:(113,1)-(124,28)                   4.4    2.9
	readFileStrict       Utility.Misc               Utility/Misc.hs:33:1-59                           3.7    1.6
	catches              Control.Monad.Catch        src/Control/Monad/Catch.hs:(432,1)-(436,76)       3.1    3.6
	encodeW8             Utility.FileSystemEncoding Utility/FileSystemEncoding.hs:(131,1)-(133,70)    3.1    2.3
	
"""]]
