[[!comment format=mdwn
 username="ewen"
 avatar="http://cdn.libravatar.org/avatar/605b2981cb52b4af268455dee7a4f64e"
 subject="Plumbing commands vs Porcelain commands"
 date="2023-07-13T00:26:20Z"
 content="""
@joey (re [comment 11](http://git-annex.branchable.com/bugs/Changing_sync_to_include_content_breaks_UX/#comment-e4557f089ec22304ff506f09f791bb81)): thank you for replying.  I apologise if my tone sounded accusatory; in hindsight writing late at night after a stressful year probably wasn't the best idea.

I don't know what your intentions are here, which is part of the problem.  From the outside, it feels like the git-annex assistant functionality is now the dominant use case which is guiding the development changes.  (And that's understandable if it's most/all of your funding to work on the project.)  That seems to be leading towards the \"plumbing\" low level commands being transitioned into higher level (\"porcelain\" in git terminology) commands, which do multiple things; and access to the low level functionality being decreased or removed.

Yes, git has done a few \"UX breaking\" transitions in the past.  But in all the cases I can think of the change in functionality was accompanied with obvious documentation on why the change was being made, and how to adapt.  For instance the [git safe directory behaviour change (CVE-2022-24765)](https://github.blog/2022-04-12-git-security-vulnerability-announced/) prompted a lot of documentation about why it was changed (eg, [git config manpage](https://git-scm.com/docs/git-config#Documentation/git-config.txt-safedirectory)), and specifically how users could restore the existing functionality where that was appropriate (and, eg, it gave an exact command to run in the warning output).  I've been running into that problem repeatedly for a year (including supporting other users), but at least knowing why, and that the recommended \"fix command\" is the ideal solution, makes it quick to explain/fix/carry on.

In the case of this git-annex change to `sync` (from a \"just plumbing\" meta data sync command, to a \"porcelain\" git annex assistant like command) there doesn't seem to be any clear documentation on why it is changing, or the recommended process to preserve (or recreate) the existing default functionality (meta data sync only), particularly in a backwards compatible way.

The reference to the [six year old commit](http://source.git-annex.branchable.com/?p=source.git;a=commitdiff;h=b77903af48e650dbb777f29e98d0c7b388353ebd) which you see as \"starting this change\" adds some more context, but almost all of the \"documentation\" about this change appears to be scattered between some source code commits, some short changelog entries, and a bug that started being about something else.  As someone who has followed your personal blog and the git-annex dev blog for years, the change of \"sync\" from a low level plumbing command (with optional \"please do more\") to a high level porcelain command (with optional \"please skip most of the things you want to do) still seemed to appear very suddenly, without any foreshadowing it was going to change.  And I remain unclear on the intended timeline for the (fairly fundamental, IMHO) change in default behaviour.

For my purposes I think from here on I'll be doing *all* of the following:

1.  On any system I install git-annex, running `git config --global annex.synccontent false` to set my per-user, per-machine state to equivalent to now

2.  On any git-annex wrapper scripts I have that run `sync`, explicitly calling `git annex sync --no-content` instead of a bare `git-annex sync` as before

3.  On any new git-annex repo that I set up, running `git annex config --set annex.synccontent false`

4.  On the existing git-annex repos, as I interact with them again and remember, run `git annex config --set annex.synccontent false` to maintain the existing default

5.  On new/existing git-annex repos, consider also running `git annex wanted . present` as well, since that seems to effectively match my current policy (ie, what is there is what is supposed to be there, because I put it there).

(I appreciate that mostly any one of those \"should be sufficient\".  But with a lot of existing git annex repos, spread across lots of machines/drives, some of which are offline, the risks of overlooking one or more of them later on is non-trivial.  So belt and braces here.)

Ewen
"""]]
