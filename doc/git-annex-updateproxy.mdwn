# NAME

git-annex updateproxy - update records with proxy configuration

# SYNOPSIS

git annex updateproxy

# DESCRIPTION

A git-annex repository can act as a proxy for its remotes. That allows
annexed content to be stored and removed from the proxy's remotes, by
repositories that do not have a direct connection to the remotes.

By default, no proxying is done. To configure the local repository to act
as a proxy for its remote named "foo", run `git config remote.foo.annex-proxy`
true`.

After setting or unsetting `remote.<name>.annex-proxy` git configurations,
run `git-annex updateproxy` to record the proxy configuration in the
git-annex branch. That tells other repositories about the proxy
configuration.

Suppose, for example, that remote "work" has had this command run in
it. Then after pulling from "work", git-annex will know about an
additional remote, "work-foo". That remote will be accessed using "work" as
a proxy.

Proxies can only be accessed via ssh or by an annex+http url.

To set up proxying to a special remote that is configured with
exporttree=yes, its necessary for it to also be configured with
annexobjects=yes. And, "remote.<name>.annex-tracking-branch" needs to
be configured to the branch that will be exported to the special remote.
When that branch is pushed to the proxy, it will update the tree exported
to the special remote. When files are copied to the remote via the proxy,
it will also update the exported tree.

Note that proxying for a special remote can temporarily use disk space
in the repository, to temporarily hold the content of annexed files.

# OPTIONS

* The [[git-annex-common-options]](1) can be used.

# SEE ALSO

* [[git-annex]](1)
* [[git-annex-updatecluster]](1)
* [[git-annex-export]](1)

# AUTHOR

Joey Hess <id@joeyh.name>

Warning: Automatically converted into a man page by mdwn2man. Edit with care.
