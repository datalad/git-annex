# NAME

git-annex whereis - lists repositories that have file content

# SYNOPSIS

git annex whereis `[path ...]`

# DESCRIPTION

Displays information about where the contents of files are located.

For example:

	# git annex whereis
	whereis my_cool_big_file (1 copy)
		0c443de8-e644-11df-acbf-f7cd7ca6210d  -- laptop
	whereis other_file (3 copies)
		0c443de8-e644-11df-acbf-f7cd7ca6210d  -- laptop
		62b39bbe-4149-11e0-af01-bb89245a1e61  -- usb drive [here]
		7570b02e-15e9-11e0-adf0-9f3f94cb2eaa  -- backup drive

Note that this command does not contact remotes to verify if they still
have the content of files. It only reports on the last information that was
received from remotes.

# OPTIONS

* matching options
  
  The [[git-annex-matching-options]](1)
  can be used to control what to act on.

* `--key=keyname`

  Show where a particular git-annex key is located.

* `--all` `-A`

  Show whereis information for all known keys.
  
  (Except for keys that have been marked as dead,
  see [[git-annex-dead]](1).)

* `--branch=ref`

  Show whereis information for files in the specified branch or treeish.

* `--unused`

  Show whereis information for files found by last run of git-annex unused.

* `--batch`

  Enables batch mode, in which a file is read in a line from stdin,
  its information displayed, and repeat.

  Note that if the file is not an annexed file, or does not match
  specified matching options, an empty line will be
  output instead.

* `--batch-keys`

  This is like `--batch` but the lines read from stdin are parsed as keys.

* `-z`

  Makes batch input be delimited by nulls instead of the usual
  newlines.

* `--json`

  Enable JSON output. This is intended to be parsed by programs that use
  git-annex. Each line of output is a JSON object.

* `--json-error-messages`

  Messages that would normally be output to standard error are included in
  the json instead.

* `--format=value`

  Use custom output formatting.

  The value is a format string, in which '${var}' is expanded to the
  value of a variable. To right-justify a variable with whitespace,
  use '${var;width}' ; to left-justify a variable, use '${var;-width}';
  to escape unusual characters (including control characters)
  in a variable, use '${escaped_var}'

  These variables are available for use in formats: file, key, uuid,
  url, backend, bytesize, humansize, keyname, hashdirlower, hashdirmixed,
  mtime (for the mtime field of a WORM key).

  Also, '\\n' is a newline, '\\000' is a NULL, etc.

  When the format contains the uuid variable, it will be expanded in turn
  for each repository that contains the file content. For example,
  with --format="${file} ${uuid}\\n", output will look like:
  
	foo 00000000-0000-0000-0000-000000000001
	foo a7f7ddd0-9a08-11ea-ab66-8358e4209d30
	bar a7f7ddd0-9a08-11ea-ab66-8358e4209d30

  The same applies when the url variable is used and a file has multiple
  recorded urls.

* Also the [[git-annex-common-options]](1) can be used.

# SEE ALSO

[[git-annex]](1)

[[git-annex-find]](1)

[[git-annex-list]](1)

# AUTHOR

Joey Hess <id@joeyh.name>

Warning: Automatically converted into a man page by mdwn2man. Edit with care.
